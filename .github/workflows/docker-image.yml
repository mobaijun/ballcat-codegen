name: CI

on:
  push:
    branches:
      # 监听推送到 master 分支
      - "master"
    # 监听以 v 开头的标签
    tags:
      - 'v*'
  pull_request:
    # 监听针对 master 分支的拉取请求
    branches:
      - "master"

jobs:
  build:
    # 使用最新的 Ubuntu 环境
    runs-on: ubuntu-latest

    env:
      # 默认为 Docker Hub，如果使用其他 Docker 注册表，可以修改
      REGISTRY: 'docker.io'
      # 使用 GitHub 仓库名作为镜像名称，格式为 <账户>/<仓库>
      # IMAGE_NAME: ${{ github.generator }}
      IMAGE_NAME: mobaijun/generator

    steps:
      # 检出代码
      - name: Checkout code
        # 检出代码，默认会检出整个仓库
        uses: actions/checkout@v3

      # 设置 JDK 11
      - name: Set up JDK 11
        # 设置 Java 版本为 11
        uses: actions/setup-java@v3
        with:
          # Java 版本设置为 11
          java-version: '11'
          # 使用 Temurin 的 JDK 发行版
          distribution: 'temurin'
          # 启用 Maven 缓存，提升构建速度
          cache: maven

      # 使用 Maven 构建项目
      - name: Build with Maven
        # 使用 Maven 清理并构建项目
        run: mvn -B clean package --file pom.xml

      # 构建 Docker 镜像
      - name: Build Docker image
        # 根据 Dockerfile 构建镜像，并标记为 latest
        run: docker build -f ./ballcat-codegen-backend/src/main/resources/docker/Dockerfile . --tag ${{ env.IMAGE_NAME }}:latest

      # 登录到 Docker Hub（或其他 Docker 注册表）
      - name: Log in to Docker Hub
        # 仅在非 PR 事件中执行登录
        if: github.event_name != 'pull_request'
        # 使用 Docker 登录动作
        uses: docker/login-action@v2
        with:
          # 使用自定义的注册表（默认为 Docker Hub）
          registry: ${{ env.REGISTRY }}
          # 从 GitHub Secrets 获取 Docker 用户名
          username: ${{ secrets.DOCKER_USERNAME }}
          # 从 GitHub Secrets 获取 Docker 密码
          password: ${{ secrets.DOCKER_PASSWORD }}

      # 提取 Docker 元数据（标签和标签）
      - name: Extract Docker metadata
        id: meta
        # 使用 Docker metadata-action 提取元数据
        uses: docker/metadata-action@v4
        with:
          # 使用定义的镜像名称
          images: ${{ env.IMAGE_NAME }}
          tags: |
            # 设置最新标签
            type=raw,value=latest,enable={{is_default_branch}}
            # 设置基于标签的标签
            type=ref,enable=true,priority=600,prefix=,suffix=,event=tag

      # 构建并推送 Docker 镜像
      - name: Build and push Docker image
        # 使用 Docker build-push-action 来构建和推送镜像
        uses: docker/build-push-action@v3
        with:
          # Docker 构建上下文为当前目录
          context: .
          # Dockerfile 路径
          file: ./ballcat-codegen-backend/src/main/resources/docker/Dockerfile
          # 如果不是 PR，推送镜像
          push: ${{ github.event_name != 'pull_request' }}
          # 使用提取的标签推送镜像
          tags: ${{ steps.meta.outputs.tags }}
          # 使用提取的标签作为镜像元数据
          labels: ${{ steps.meta.outputs.labels }}
